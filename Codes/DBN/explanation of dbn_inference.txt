
**Explanation:**

1.  **Imports and Setup:** Imports necessary libraries and your `dbn_model` functions. Defines constants for particle count, data paths, and state mappings.
2.  **`OBS_STATE_MAP`:** Crucial dictionary to map your discrete string labels ('Low', 'Medium', 'High') found in the CSV to the integer states (0, 1, 2) used in the CPTs. **Make sure the integer mapping matches the state order you assumed when defining CPTs.**
3.  **`prepare_evidence_sequence`:** Takes a DataFrame slice, iterates through time steps, looks up the discrete value for each observation variable, maps it to an integer using `OBS_STATE_MAP`, skips NaNs, and creates a list of evidence dictionaries formatted correctly for `pgmpy`.
4.  **`run_dbn_inference`:**
    *   Initializes `ParticleFiltering`.
    *   Iterates through the `evidence_sequence`.
    *   Calls `pf.forward_inference` for each time step, passing the evidence for that step and the list of hidden variables (with time index `t`) to query.
    *   Stores the returned dictionary of marginal `Factor` objects for each step.
5.  **`format_results_to_dataframe`:** Takes the list of results from inference and converts it into a pandas DataFrame where columns represent the probability of each state for each queried hidden variable over time (e.g., `P(Engine_Core_Health=OK)`, `P(Engine_Core_Health=Warn)`, etc.).
6.  **`if __name__ == "__main__":`:**
    *   Loads the DBN model using your previous functions.
    *   Loads the discretized data.
    *   Selects a test slice (example focuses on 'BearingWear' around the known fault onset time).
    *   Calls `prepare_evidence_sequence`.
    *   Calls `run_dbn_inference`.
    *   Calls `format_results_to_dataframe`.
    *   Prints head/tail of the results DataFrame.
    *   Creates a basic plot showing the inferred probabilities over the time slice, saving it to a file.

**To Run:**

1.  Save this code as `dbn_inference.py` in the same directory as `dbn_model.py`.
2.  Make sure your `sim_data_discrete.csv` is in a subdirectory named `Data`.
3.  Activate your conda environment (`conda activate aircraft_env`).
4.  Run `python dbn_inference.py`.

You should see output messages and then a plot saved in the `Data/inference_plots` directory showing how the probabilities of `Engine_Core_Health` and `Lubrication_System_Health` change over the selected time slice. Check if `P(Engine_Core_Health=Warn/Fail)` increases after the red dashed line (fault onset).pip install pgmpy

Okay, looking at this plot is exactly the "Check Basic Logic" step for the DBN inference part of Week 3. Here's what you should be looking for and what your plot shows:

Goal: Does the DBN's belief about the hidden health states change in a way that makes sense, given that the input data comes from a 'BearingWear' scenario?

1. Top Plot: Engine Core Health

What to Look For: Since this is a 'BearingWear' scenario, we expect the Engine Core Health to degrade. This means:

The probability of the 'OK' state (Blue line) should decrease over time, especially after the fault onset (red dashed line).

The probability of 'Warn' (Orange line) or 'Fail' (Green line) state should increase over time, especially after the fault onset. Bearing wear primarily manifests as increased vibration and maybe slightly higher EGT, which should push the belief towards 'Warn' or 'Fail'.

What Your Plot Shows:

The Blue line (P(OK)) starts high (around 0.9) and clearly trends downwards, dropping more noticeably after the red line. It ends around 0.5. (Correct Trend)

The Orange line (P(Warn)) starts very low and steadily increases, becoming the most probable non-OK state after the red line. It ends around 0.45. (Correct Trend)

The Green line (P(Fail)) starts near zero and increases only very slightly, staying low (<0.02). This suggests that, based on the evidence and your CPTs, the model interprets the condition primarily as a 'Warn' state rather than a full 'Fail' state within this 50-step window. (Plausible Trend)

Note: The jaggedness or spikes (like around step 40) are normal and usually due to noise in the input sensor readings momentarily changing the belief.

2. Bottom Plot: Lubrication System Health

What to Look For: According to your project description, bearing wear has minimal direct correlation with lubrication system health. Therefore, we expect:

The probability of the 'OK' state (Blue line) should remain high throughout the slice.

The probability of the 'Fail' state (Orange line) should remain low throughout the slice.

What Your Plot Shows:

The Blue line (P(OK)) starts very high (near 1.0) and stays high, although it does drift slightly downwards, ending around 0.75. (Mostly Correct Trend)

The Orange line (P(Fail)) starts very low and drifts slightly upwards, ending around 0.25. (Slight Deviation)

Interpretation: While P(OK) stays dominant, the gradual increase in P(Fail) suggests that something in the evidence (likely occasional noisy 'Low' readings in the OilPressure_PSI_Discrete data) is slightly pushing the belief towards a lubrication failure. This might indicate that either the simulated oil pressure noise is sometimes crossing the 'Low' threshold, or your CPTs could be refined later to make the model less sensitive to minor oil pressure fluctuations when diagnosing bearing wear. However, the key is that the probability of lubrication failure remains much lower than the probability of core health issues ('Warn').

Overall Conclusion:

Success: The plot strongly indicates that your DBN inference is working correctly for this part of Week 3. It successfully detects the degradation in Engine Core Health associated with the Bearing Wear scenario by increasing the probability of the 'Warn' state after the fault onset.

Minor Observation: The slight drift in Lubrication System Health might warrant a quick look at the simulated oil pressure data for the BearingWear scenario or a mental note to potentially tweak CPTs later if this causes issues in classification, but it doesn't invalidate the main positive result for Core Health.

You have successfully demonstrated basic DBN inference making sense of the evidence! You are ready for the HMM part of Week 3.